{"version":3,"sources":["graphql/queries.js","pages/film-page/film-page.jsx","hooks/hooks.js","components/film-tile/film-tile.jsx","pages/home-page/home-page.jsx","utils/constants.js","pages/secondary-page/secondary-page.jsx","app.jsx","serviceWorker.js","index.js"],"names":["GET_ALL_FILMS","gql","GET_FILM_BY_TITLE","cb","FilmPage","titleParam","search","useLocation","React","useMemo","URLSearchParams","useQueryParams","get","state","useContext","StoreContext","loading","data","useQuery","variables","title","className","style","backgroundColor","image","banner","director","producer","yearReleased","description","rtScore","films","to","size","color","src","alt","FilmTile","setColor","useState","dispatch","useEffect","FastAverageColor","getColorAsync","then","hex","onMouseEnter","type","payload","HomePage","href","map","film","i","key","SecondaryPage","createContext","reducer","action","Error","initialState","App","useReducer","StrictMode","Provider","value","exact","path","component","Boolean","window","location","hostname","match","client","ApolloClient","uri","process","SERVER_URI","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73e95dd9.chunk.js","sourcesContent":["import {gql} from '@apollo/client'\n\nexport const GET_ALL_FILMS = gql`\nquery GetFilms {\n  films(sort: \"year\") {\n    title\n    director\n    yearReleased\n    image\n  }\n}\n`\n\nexport const GET_FILM_BY_TITLE = gql`\nquery GetFilm($title: String!) {\n  films(find: {title: $title}) {\n    title\n    director\n    yearReleased\n    image\n    banner\n    description\n    producer\n    runningTime\n    rtScore\n  }\n}\n`\n","import React, {useContext} from 'react'\nimport {useQuery} from '@apollo/client'\nimport {GET_FILM_BY_TITLE} from '../../graphql/queries'\nimport {useQueryParams} from '../../hooks/hooks'\nimport {StoreContext} from '../../app'\nimport {IoArrowBack} from 'react-icons/io5'\nimport {Link} from 'react-router-dom'\n\nimport './film-page.scss'\n\nconst cb = 'film-page'\n\nconst FilmPage = () => {\n    let query = useQueryParams()\n    let titleParam = query.get('title')\n    const {state} = useContext(StoreContext)\n\n    const {loading, data} = useQuery(GET_FILM_BY_TITLE, {\n        variables: {title: titleParam},\n    })\n\n    if (loading) {\n        return <div className={cb} style={{backgroundColor: state.backgroundColor}} />\n    }\n\n\n    const {title, image, banner, director, producer, yearReleased, description, rtScore} = data?.films[0]\n    return (\n        <div className={cb} style={{backgroundColor: state.backgroundColor}}>\n            <Link className={`${cb}__back`} to='/'>\n                <IoArrowBack size={50} color='white' />\n            </Link>\n            <div className={`${cb}__banner-container`}>\n                <img src={banner} alt={`Banner for ${title}`} />\n            </div>\n            <div className={`${cb}__below-banner`}>\n                <div className={`${cb}__poster-container`}>\n                    <img src={image} alt={`Poster for ${title}`} />\n                </div>\n                <div className={`${cb}__text-wrapper`}>\n                    <h1 className={`${cb}__title`}>{title}</h1>\n                    <h2 className={`${cb}__released`}>{yearReleased}</h2>\n                    <div className={`${cb}__description`}>{description}</div>\n                    <h2 className={`${cb}__rt-score`}>Rotten Tomatoes: {rtScore}</h2>\n                    <h2 className={`${cb}__creator`}>Directed by {director}</h2>\n                    <h2 className={`${cb}__creator`}>Produced by {producer}</h2>\n\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default FilmPage\n","import {useLocation} from 'react-router'\nimport React from 'react'\n\nexport function useQueryParams() {\n    const {search} = useLocation()\n  \n    return React.useMemo(() => new URLSearchParams(search), [search])\n  }\n","import React, {useState, useEffect, useContext} from 'react'\nimport FastAverageColor from 'fast-average-color'\n\nimport './film-tile.scss'\nimport {StoreContext} from '../../app'\nimport {Link} from 'react-router-dom'\n\nconst cb = 'film-tile'\n\nconst FilmTile = ({title, director, image, yearReleased}) => {\n    const [color, setColor] = useState('#444')\n    const {dispatch} = useContext(StoreContext)\n\n    useEffect(() => {\n        const fac = new FastAverageColor()\n        fac.getColorAsync(image)\n            .then(color => {\n                setColor(color.hex)\n            })\n    }, [])\n\n    const onMouseEnter = () => {\n        dispatch({type: 'set', payload: color})\n    }\n\n    return (\n        <Link to={`/film?title=${title}`} className={cb} onMouseEnter={onMouseEnter}>\n            <img className={`${cb}__poster`} src={image} alt={`Poster for ${title}`} />\n            <div className={`${cb}__text-wrapper`}>\n                <h2>{title} ({yearReleased})</h2>\n                <h3>Dir. {director}</h3>\n            </div>\n        </Link>\n    )\n}\n\nexport default FilmTile\n","import React, {useContext} from 'react'\nimport {useQuery} from '@apollo/client'\nimport {GET_ALL_FILMS} from '../../graphql/queries'\nimport FilmTile from '../../components/film-tile/film-tile'\n\nimport './home-page.scss'\nimport {StoreContext} from '../../app'\nimport {BACKEND_CODE, FRONTEND_CODE, GITHUB_URL} from '../../utils/constants'\n\nconst cb = 'home'\n\nconst HomePage = () => {\n    const {data} = useQuery(GET_ALL_FILMS)\n    const {state} = useContext(StoreContext)\n\n    return (\n        <div className={cb} style={{backgroundColor: state.backgroundColor}}>\n            <div className={`${cb}__title-wrapper`}>\n                <h1 className={`${cb}__heading`}>GhibliQL</h1>\n                <h2 className={`${cb}__description`}>A GraphQL-powered catalog by <a href={GITHUB_URL}>Alex Charland</a></h2>\n                <h2 className={`${cb}__repos`}><a href={FRONTEND_CODE}>Frontend Code</a><a href={BACKEND_CODE}>Backend Code</a></h2>\n            </div>\n            <div className={`${cb}__tiles-wrapper`}>\n                {data && data.films.map((film, i) => (\n                    <FilmTile key={`film-${i}`} {...film} />\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default HomePage\n","export const SECONDARY_PAGE_URL = '/secondary'\n\nexport const GITHUB_URL = 'https://github.com/ac3charland'\n\nexport const BACKEND_CODE = 'https://github.com/ac3charland/graphql-practice'\nexport const FRONTEND_CODE = 'https://github.com/ac3charland/graphql-react-practice'\n\n// Redux Actions\nexport const MARK_HOME_PAGE_AS_VISITED = 'MARK_HOME_PAGE_AS_VISITED'\n\n// Programmatic CSS\nexport const NAVBAR_HEIGHT = 5\n","import React from 'react'\nimport './secondary-page.scss'\n\nconst cb = 'secondary'\n\nexport default function SecondaryPage() {\n    return (\n        <div className={cb}>\n            <h1 className={`${cb}__heading`}>Short secondary page!</h1> \n            <p>(Footer sticks to bottom)</p>\n        </div>\n    )\n}\n","import React, {useReducer} from 'react'\nimport {Route, BrowserRouter as Router, Switch} from 'react-router-dom'\nimport FilmPage from './pages/film-page/film-page'\nimport HomePage from './pages/home-page/home-page'\nimport SecondaryPage from './pages/secondary-page/secondary-page'\nimport {SECONDARY_PAGE_URL} from './utils/constants'\n\nexport const StoreContext = React.createContext()\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case 'set':\n            return {\n                ...state,\n                backgroundColor: action.payload,\n            }\n        default:\n            throw new Error()\n    }\n}\n\nconst initialState = {\n    backgroundColor: '#444',\n}\n\nconst App = () => {\n    const [state, dispatch] = useReducer(reducer, initialState)\n\n    return (\n        <React.StrictMode>\n            <StoreContext.Provider value={{state, dispatch}}>\n                <Router>\n                    <div className='page-wrapper'>\n                        <Switch>\n                            <Route exact path='/' component={HomePage} />\n                            <Route path='/film' component={FilmPage} />\n                            <Route exact path={SECONDARY_PAGE_URL} component={SecondaryPage} />\n                        </Switch>\n                    </div>\n                </Router>\n            </StoreContext.Provider>\n        </React.StrictMode>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* global process */\n/* eslint-disable no-console */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } \n      else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } \n            else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } \n      else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n} from '@apollo/client'\n\nconst client = new ApolloClient({\n  uri: process.env.SERVER_URI || 'http://localhost:4000',\n  cache: new InMemoryCache(),\n})\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}